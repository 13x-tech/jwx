package main

import (
	"bytes"
	"fmt"
	"os"

	"github.com/lestrrat-go/codegen"
	"github.com/pkg/errors"
)

type definition struct {
	Filename     string
	Package      string
	ReturnType   string
	ParseOptions bool
}

func main() {
	if err := _main(); err != nil {
		fmt.Fprintf(os.Stderr, "%s\n", err)
		os.Exit(1)
	}
}

func _main() error {
	definitions := []definition{
		{
			Package:    "jwk",
			ReturnType: "Set",
			Filename:   "jwk/io.go",
		},
		{
			Package:    "jws",
			ReturnType: "*Message",
			Filename:   "jws/io.go",
		},
		{
			Package:    "jwe",
			ReturnType: "*Message",
			Filename:   "jwe/io.go",
		},
		{
			Package:      "jwt",
			ReturnType:   "Token",
			Filename:     "jwt/io.go",
			ParseOptions: true,
		},
	}

	for _, def := range definitions {
		if err := generateFile(def); err != nil {
			return err
		}
	}
	return nil
}

func generateFile(def definition) error {
	var buf bytes.Buffer
	fmt.Fprintf(&buf, "\n\n// Automatically generated by internal/cmd/genreadfile/main.go. DO NOT EDIT")
	fmt.Fprintf(&buf, "\n\npackage %s", def.Package)

	fmt.Fprintf(&buf, "\n\n// ReadFileOption describes options that can be passed to ReadFile.")
	if !def.ParseOptions {
		fmt.Fprintf(&buf, "\n// Currently there are no options available that can be passed to ReadFile, but")
		fmt.Fprintf(&buf, "\n// it is provided here for anticipated future additions")
	}
	fmt.Fprintf(&buf, "\ntype ReadFileOption interface {")
	fmt.Fprintf(&buf, "\nOption")
	fmt.Fprintf(&buf, "\nreadFileOption()")
	fmt.Fprintf(&buf, "\n}")

	if !def.ParseOptions {
		fmt.Fprintf(&buf, "\nfunc ReadFile(path string, _ ...ReadFileOption) (%s, error) {", def.ReturnType)
	} else {
		fmt.Fprintf(&buf, "\nfunc ReadFile(path string, options ...ReadFileOption) (%s, error) {", def.ReturnType)
		fmt.Fprintf(&buf, "\nvar parseOptions []ParseOption")
		fmt.Fprintf(&buf, "\nfor _, option := range options {")
		fmt.Fprintf(&buf, "\nswitch option := option.(type) {")
		fmt.Fprintf(&buf, "\ncase ParseOption:")
		fmt.Fprintf(&buf, "\nparseOptions = append(parseOptions, option)")
		fmt.Fprintf(&buf, "\n}")
		fmt.Fprintf(&buf, "\n}")
		fmt.Fprintf(&buf, "\n")
	}
	fmt.Fprintf(&buf, "\nf, err := os.Open(path)")
	fmt.Fprintf(&buf, "\nif err != nil {")
	fmt.Fprintf(&buf, "\nreturn nil, err")
	fmt.Fprintf(&buf, "\n}")
	fmt.Fprintf(&buf, "\n\ndefer f.Close()")
	if def.ParseOptions {
		fmt.Fprintf(&buf, "\nreturn ParseReader(f, parseOptions...)")
	} else {
		fmt.Fprintf(&buf, "\nreturn ParseReader(f)")
	}
	fmt.Fprintf(&buf, "\n}")
	if err := codegen.WriteFile(def.Filename, &buf, codegen.WithFormatCode(true)); err != nil {
		if cfe, ok := err.(codegen.CodeFormatError); ok {
			fmt.Fprint(os.Stderr, cfe.Source())
		}
		return errors.Wrapf(err, `failed to write to %s`, def.Filename)
	}
	return nil
}
