package jws

import (
	"crypto"
	"crypto/ecdsa"
	"crypto/rsa"
	"hash"
	"net/url"

	"github.com/lestrrat/go-jwx/buffer"
	"github.com/lestrrat/go-jwx/jwa"
	"github.com/lestrrat/go-jwx/jwk"
)

// EssentialHeader is a set of headers that are already defined in RFC 7515
type EssentialHeader struct {
	Algorithm              jwa.SignatureAlgorithm `json:"alg,omitempty"`
	ContentType            string                 `json:"cty,omitempty"`
	Critical               []string               `json:"crit,omitempty"`
	Jwk                    jwk.Key                `json:"jwk,omitempty"` // public key
	JwkSetURL              *url.URL               `json:"jku,omitempty"`
	KeyID                  string                 `json:"kid,omitempty"`
	Type                   string                 `json:"typ,omitempty"` // e.g. "JWT"
	X509Url                *url.URL               `json:"x5u,omitempty"`
	X509CertChain          []string               `json:"x5c,omitempty"`
	X509CertThumbprint     string                 `json:"x5t,omitempty"`
	X509CertThumbprintS256 string                 `json:"x5t#S256,omitempty"`
}

// Header represents a JWS header.
type Header struct {
	*EssentialHeader `json:"-"`
	PrivateParams    map[string]interface{} `json:"-"`
}

// EncodedHeader represents a header value that is base64 encoded
// in JSON format
type EncodedHeader struct {
	*Header
	// This is a special field. It's ONLY set when parsed from a serialized form.
	// It's used for verification purposes, because header representations (such as
	// JSON key order) may differ from what the source encoded with and what the
	// go json package uses
	//
	// If this field is populated (Len() > 0), it will be used for signature
	// calculation.
	// If you change the header values, make sure to clear this field, too
	Source buffer.Buffer `json:"-"`
}

// PayloadSigner generates signature for the given payload
type PayloadSigner interface {
	Sign([]byte) ([]byte, error)
	Algorithm() jwa.SignatureAlgorithm
	ProtectedHeader() HeaderInterface
	PublicHeader() HeaderInterface
}

// MergedHeader is a provides an interface to query both protected
// and public headers
type MergedHeader struct {
	ProtectedHeader *EncodedHeader
	PublicHeader    *Header
}

// Signature represents a signature generated by one of the signers
type Signature struct {
	PublicHeader    *Header        `json:"header"`              // Raw JWS Unprotected Heders
	ProtectedHeader *EncodedHeader `json:"protected,omitempty"` // Base64 encoded JWS Protected Headers
	Signature       buffer.Buffer  `json:"signature"`           // Base64 encoded signature
}

type StandardMessage struct {
	payload    []byte
	signatures []*StandardSignature
}

type StandardSignature struct {
	headers   *StandardHeaders
	protected *StandardHeaders
	signature []byte
}

// Message represents a full JWS encoded message. Flattened serialization
// is not supported as a struct, but rather it's represented as a
// Message struct with only one `signature` element
type Message struct {
	payload []byte `json:"payload"`

	Payload    buffer.Buffer `json:"payload"`
	Signatures []Signature   `json:"signatures"`
}

// MultiSign is a signer that creates multiple signatures for the message.
type MultiSign struct {
	Signers []PayloadSigner
}

// HmacSign is a symmetric signer using HMAC
type HmacSign struct {
	Public    *Header
	Protected *Header
	Key       []byte
	hash      func() hash.Hash
}

// RsaVerify is a sign verifider using RSA
type RsaVerify struct {
	alg    jwa.SignatureAlgorithm
	hash   crypto.Hash
	pubkey *rsa.PublicKey
}

// EcdsaVerify is a sign verifider using ECDSA
type EcdsaVerify struct {
	alg    jwa.SignatureAlgorithm
	hash   crypto.Hash
	pubkey *ecdsa.PublicKey
}

// HmacVerify is a symmetric sign verifier using HMAC
type HmacVerify struct {
	signer *HmacSign
}

// JWKAcceptor decides which keys can be accepted
// by functions that iterate over a JWK key set.
type JWKAcceptor interface {
	Accept(jwk.Key) bool
}

// JWKAcceptFunc is an implementation of JWKAcceptor
// using a plain function
type JWKAcceptFunc func(jwk.Key) bool

// Accept executes the provided function to determine if the
// given key can be used
func (f JWKAcceptFunc) Accept(key jwk.Key) bool {
	return f(key)
}

// DefaultJWKAcceptor is the default acceptor that is used
// in functions like VerifyWithJWKSet
var DefaultJWKAcceptor = JWKAcceptFunc(func(key jwk.Key) bool {
	if u := key.Use(); u != "" && u != "enc" && u != "sig" {
		return false
	}
	return true
})

type HeaderInterface interface {
	Set(string, interface{}) error
}
